-- This file has been generated by EWG. Do not edit. Changes will be lost!

class CONTROL_TEMPLATE_STRUCT

inherit

	EWG_STRUCT

	CONTROL_TEMPLATE_STRUCT_EXTERNAL
		export
			{NONE} all
		end

creation

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {NONE} -- Implementation

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	get_controlrect: POINTER is
		obsolete "Use `controlrect' instead."
			-- Access member `controlRect'
		require
			exists: exists
		do
			Result := get_controlrect_external (item)
		ensure
			result_correct: Result = get_controlrect_external (item)
		end

	controlrect: POINTER is
			-- Access member `controlRect'
		require
			exists: exists
		do
			Result := get_controlrect_external (item)
		ensure
			result_correct: Result = get_controlrect_external (item)
		end

	set_controlrect (a_value: POINTER) is
			-- Set member `controlRect'
		require
			exists: exists
		do
			set_controlrect_external (item, a_value)
		end

	get_controlvalue: INTEGER is
		obsolete "Use `controlvalue' instead."
			-- Access member `controlValue'
		require
			exists: exists
		do
			Result := get_controlvalue_external (item)
		ensure
			result_correct: Result = get_controlvalue_external (item)
		end

	controlvalue: INTEGER is
			-- Access member `controlValue'
		require
			exists: exists
		do
			Result := get_controlvalue_external (item)
		ensure
			result_correct: Result = get_controlvalue_external (item)
		end

	set_controlvalue (a_value: INTEGER) is
			-- Set member `controlValue'
		require
			exists: exists
		do
			set_controlvalue_external (item, a_value)
		ensure
			a_value_set: a_value = controlvalue
		end

	get_controlvisible: INTEGER is
		obsolete "Use `controlvisible' instead."
			-- Access member `controlVisible'
		require
			exists: exists
		do
			Result := get_controlvisible_external (item)
		ensure
			result_correct: Result = get_controlvisible_external (item)
		end

	controlvisible: INTEGER is
			-- Access member `controlVisible'
		require
			exists: exists
		do
			Result := get_controlvisible_external (item)
		ensure
			result_correct: Result = get_controlvisible_external (item)
		end

	set_controlvisible (a_value: INTEGER) is
			-- Set member `controlVisible'
		require
			exists: exists
		do
			set_controlvisible_external (item, a_value)
		ensure
			a_value_set: a_value = controlvisible
		end

	get_fill: INTEGER is
		obsolete "Use `fill' instead."
			-- Access member `fill'
		require
			exists: exists
		do
			Result := get_fill_external (item)
		ensure
			result_correct: Result = get_fill_external (item)
		end

	fill: INTEGER is
			-- Access member `fill'
		require
			exists: exists
		do
			Result := get_fill_external (item)
		ensure
			result_correct: Result = get_fill_external (item)
		end

	set_fill (a_value: INTEGER) is
			-- Set member `fill'
		require
			exists: exists
		do
			set_fill_external (item, a_value)
		ensure
			a_value_set: a_value = fill
		end

	get_controlmaximum: INTEGER is
		obsolete "Use `controlmaximum' instead."
			-- Access member `controlMaximum'
		require
			exists: exists
		do
			Result := get_controlmaximum_external (item)
		ensure
			result_correct: Result = get_controlmaximum_external (item)
		end

	controlmaximum: INTEGER is
			-- Access member `controlMaximum'
		require
			exists: exists
		do
			Result := get_controlmaximum_external (item)
		ensure
			result_correct: Result = get_controlmaximum_external (item)
		end

	set_controlmaximum (a_value: INTEGER) is
			-- Set member `controlMaximum'
		require
			exists: exists
		do
			set_controlmaximum_external (item, a_value)
		ensure
			a_value_set: a_value = controlmaximum
		end

	get_controlminimum: INTEGER is
		obsolete "Use `controlminimum' instead."
			-- Access member `controlMinimum'
		require
			exists: exists
		do
			Result := get_controlminimum_external (item)
		ensure
			result_correct: Result = get_controlminimum_external (item)
		end

	controlminimum: INTEGER is
			-- Access member `controlMinimum'
		require
			exists: exists
		do
			Result := get_controlminimum_external (item)
		ensure
			result_correct: Result = get_controlminimum_external (item)
		end

	set_controlminimum (a_value: INTEGER) is
			-- Set member `controlMinimum'
		require
			exists: exists
		do
			set_controlminimum_external (item, a_value)
		ensure
			a_value_set: a_value = controlminimum
		end

	get_controldefprocid: INTEGER is
		obsolete "Use `controldefprocid' instead."
			-- Access member `controlDefProcID'
		require
			exists: exists
		do
			Result := get_controldefprocid_external (item)
		ensure
			result_correct: Result = get_controldefprocid_external (item)
		end

	controldefprocid: INTEGER is
			-- Access member `controlDefProcID'
		require
			exists: exists
		do
			Result := get_controldefprocid_external (item)
		ensure
			result_correct: Result = get_controldefprocid_external (item)
		end

	set_controldefprocid (a_value: INTEGER) is
			-- Set member `controlDefProcID'
		require
			exists: exists
		do
			set_controldefprocid_external (item, a_value)
		ensure
			a_value_set: a_value = controldefprocid
		end

	get_controlreference: INTEGER is
		obsolete "Use `controlreference' instead."
			-- Access member `controlReference'
		require
			exists: exists
		do
			Result := get_controlreference_external (item)
		ensure
			result_correct: Result = get_controlreference_external (item)
		end

	controlreference: INTEGER is
			-- Access member `controlReference'
		require
			exists: exists
		do
			Result := get_controlreference_external (item)
		ensure
			result_correct: Result = get_controlreference_external (item)
		end

	set_controlreference (a_value: INTEGER) is
			-- Set member `controlReference'
		require
			exists: exists
		do
			set_controlreference_external (item, a_value)
		ensure
			a_value_set: a_value = controlreference
		end

	get_controltitle: POINTER is
		obsolete "Use `controltitle' instead."
			-- Access member `controlTitle'
		require
			exists: exists
		do
			Result := get_controltitle_external (item)
		ensure
			result_correct: Result = get_controltitle_external (item)
		end

	controltitle: POINTER is
			-- Access member `controlTitle'
		require
			exists: exists
		do
			Result := get_controltitle_external (item)
		ensure
			result_correct: Result = get_controltitle_external (item)
		end

end
