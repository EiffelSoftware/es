-- This file has been generated by EWG. Do not edit. Changes will be lost!

class HIAXIS_POSITION_STRUCT

inherit

	EWG_STRUCT

	HIAXIS_POSITION_STRUCT_EXTERNAL
		export
			{NONE} all
		end

creation

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {NONE} -- Implementation

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	toview_struct: OPAQUE_CONTROL_REF_STRUCT is
			-- Access member `toView'
		require
			exists: exists
		do
			create Result.make_shared (get_toview_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = toview
		end

	set_toview_struct (a_value: OPAQUE_CONTROL_REF_STRUCT) is
			-- Set member `toView'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_toview_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = toview
		end

	get_toview: POINTER is
		obsolete "Use `toview' instead."
			-- Access member `toView'
		require
			exists: exists
		do
			Result := get_toview_external (item)
		ensure
			result_correct: Result = get_toview_external (item)
		end

	toview: POINTER is
			-- Access member `toView'
		require
			exists: exists
		do
			Result := get_toview_external (item)
		ensure
			result_correct: Result = get_toview_external (item)
		end

	set_toview (a_value: POINTER) is
			-- Set member `toView'
		require
			exists: exists
		do
			set_toview_external (item, a_value)
		ensure
			a_value_set: a_value = toview
		end

	get_kind: INTEGER is
		obsolete "Use `kind' instead."
			-- Access member `kind'
		require
			exists: exists
		do
			Result := get_kind_external (item)
		ensure
			result_correct: Result = get_kind_external (item)
		end

	kind: INTEGER is
			-- Access member `kind'
		require
			exists: exists
		do
			Result := get_kind_external (item)
		ensure
			result_correct: Result = get_kind_external (item)
		end

	set_kind (a_value: INTEGER) is
			-- Set member `kind'
		require
			exists: exists
		do
			set_kind_external (item, a_value)
		ensure
			a_value_set: a_value = kind
		end

	get_offset: REAL is
		obsolete "Use `offset' instead."
			-- Access member `offset'
		require
			exists: exists
		do
			Result := get_offset_external (item)
		ensure
			result_correct: Result = get_offset_external (item)
		end

	offset: REAL is
			-- Access member `offset'
		require
			exists: exists
		do
			Result := get_offset_external (item)
		ensure
			result_correct: Result = get_offset_external (item)
		end

	set_offset (a_value: REAL) is
			-- Set member `offset'
		require
			exists: exists
		do
			set_offset_external (item, a_value)
		ensure
			a_value_set: a_value = offset
		end

end
